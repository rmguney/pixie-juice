[package]
name        = "pixie-juice"
version     = "0.1.0"
edition     = "2021"
resolver    = "2"
authors     = ["rmguney"]

[lib]
name       = "pixie_juice"
crate-type = ["cdylib"]   # only what wasm-bindgen/wasm-pack needs

[dependencies]
# ----- Image codecs / processing -----
# specialized libraries with WASM compatibility
image            = { version = "0.25", default-features = false, optional = true, features = ["png", "jpeg", "gif", "tiff", "bmp", "ico", "qoi", "webp", "tga"] }
imageproc        = { version = "0.25", optional = true, default-features = false }
fast_image_resize= { version = "5.2", optional = true, default-features = false }
image-webp       = { version = "0.2.3", optional = true, default-features = false }
gif              = { version = "0.13", optional = true, default-features = false }
tiff             = { version = "0.9", optional = true, default-features = false }
bmp              = { version = "0.5", optional = true, default-features = false }
ico              = { version = "0.3", optional = true, default-features = false }
qoi              = { version = "0.4", optional = true, default-features = false }
color_quant      = { version = "1.1", optional = true, default-features = false }
palette          = { version = "0.7", optional = true, default-features = false }
# oxipng           = { version = "9.1", optional = true, default-features = false }  # Requires C compiler
tinytga          = { version = "0.5", optional = true, default-features = false }     # TGA support - no-std WASM compatible
imagefmt         = { version = "4.0", optional = true, default-features = false, features = ["tga"] }  # TGA encode/decode


# ----- Mesh / geometry -----
gltf         = { version = "1.4", default-features = false, optional = true, features = ["KHR_lights_punctual","KHR_materials_transmission"] }
tobj         = { version = "3.2", optional = true, default-features = false }
ply-rs       = { version = "0.1", optional = true, default-features = false }
stl_io       = { version = "0.7", optional = true, default-features = false }
# meshopt     = { version = "0.3", default-features = false, optional = true }  # Requires C compilation
glam         = { version = "0.29", features = ["libm","bytemuck","mint"], optional = true }
# FBX support via custom parser (binary format)
nom          = { version = "7.1", optional = true, default-features = false, features = ["alloc"] }  # For FBX binary parsing


# ----- Compression -----
# Only Rust backends for now
flate2     = { version = "1.0", default-features = false, features = ["rust_backend"], optional = true }
lz4_flex   = { version = "0.11", optional = true, default-features = false }
# Remove zstd for now - requires C compilation
# zstd       = { version = "0.13", optional = true, default-features = false }

# ----- WASM / JS interop & threading -----
wasm-bindgen         = "0.2"
wasm-bindgen-futures = "0.4"
wasm-bindgen-rayon   = { version = "1.2", optional = true }
rayon                = { version = "1.10", optional = true }
serde-wasm-bindgen   = "0.6"
getrandom            = { version = "0.2", features = ["js"] }
ahash                = { version = "0.8", default-features = false }
hashbrown            = { version = "0.15", default-features = false }
web-sys = { version = "0.3", optional = true, features = [
  "console","Blob","File","FileReader","Url","Performance","Worker","MessageEvent","MessagePort",
  "WorkerGlobalScope","DedicatedWorkerGlobalScope","Window","Document","Element","HtmlElement"
] }
js-sys = "0.3"
console_error_panic_hook = { version = "0.1", optional = true }

# ----- Logging / tracing -----
tracing      = { version = "0.1", optional = true, features = ["release_max_level_info"] }
tracing-wasm = { version = "0.2", optional = true }

# ----- Serialization / errors -----
serde      = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
rkyv       = { version = "0.7", optional = true }
thiserror  = "1.0"
anyhow     = "1.0"

# ----- Allocator -----
dlmalloc = { version = "0.2", optional = true, features = ["global"] }

# ----- C interop for hotspots -----
cc      = { version = "1.1", optional = true, features = ["parallel"] }
# bindgen = { version = "0.70", optional = true }  # Disabled - not compatible with WASM, using manual bindings

[features]
default       = ["img", "mesh", "wasm", "compression", "optimization", "c_hotspots"]
img           = ["image","imageproc","fast_image_resize","color_quant","codec-gif","codec-tiff","codec-bmp","codec-ico","codec-qoi","codec-webp","codec-svg","codec-tga"]
mesh          = ["glam","fmt-gltf","fmt-obj","fmt-ply","fmt-stl","fmt-dae","fmt-fbx","fmt-3ds","fmt-usdz"]
wasm          = ["console_error_panic_hook","web-sys","tracing","tracing-wasm","dlmalloc"]
threads       = ["wasm-bindgen-rayon","rayon"]
compression   = ["flate2","lz4_flex"]
optimization  = ["color_quant"]
zero-copy     = ["rkyv"]

# Image codec features - Rust paths by default; *_c flips to C impls
# codec-png-c   = ["dep:cc", "dep:bindgen"]
# codec-jpeg-c  = ["dep:cc", "dep:bindgen"]
codec-gif     = ["gif"]
# codec-webp    = ["webp", "dep:cc", "dep:bindgen"]  # Disabled - requires C
codec-webp    = ["image-webp"]  # WebP support via dedicated pure Rust image-webp crate
# codec-svg     = ["usvg","resvg"]
codec-svg     = []  # SVG basic support without resvg dependency
# codec-pdf     = ["pdf"]
# codec-hdr     = ["exr"]
codec-tiff    = ["tiff"]
codec-bmp     = ["bmp"]
codec-ico     = ["ico"]
# codec-exr     = ["exr"]                            # Disabled - requires C
codec-qoi     = ["qoi"]
codec-tga     = ["tinytga", "imagefmt"]              # TGA support via tinytga (no-std) and imagefmt (encode/decode)

# Mesh format features
fmt-gltf      = ["gltf"]
fmt-obj       = ["tobj"]
fmt-ply       = ["ply-rs"]
fmt-stl       = ["stl_io"]
fmt-dae       = ["nom"]  # For DAE (COLLADA) XML parsing
fmt-fbx       = ["nom"]  # For FBX binary parsing
fmt-3ds       = ["nom"]  # For 3DS binary parsing (custom implementation)
fmt-usdz      = []       # Basic USDZ support (ZIP with USD files)

c_hotspots    = ["dep:cc"]

[lints.rust]
unsafe_code = "warn"  # Allow unsafe for WASM FFI but warn

[lints.clippy]
nursery  = "warn"
pedantic = "warn"

[build-dependencies]
# Build dependencies for C hotspots compilation
cc      = { version = "1.1", features = ["parallel"] }
# bindgen = "0.70"  # Disabled - not compatible with WASM target, using manual bindings

[profile.release]
opt-level     = 3
lto           = "fat"
codegen-units = 1
panic         = "abort"
strip         = true
debug         = false
incremental   = false

[profile.dev]
opt-level = 1
debug     = true

[target.'cfg(target_arch = "wasm32")'.dependencies]
dlmalloc = { version = "0.2" }

[package.metadata.docs.rs]
features = ["img", "mesh", "wasm"]
targets  = ["wasm32-unknown-unknown"]

[package.metadata.wasm-bindgen]
targets = ["web"]

[package.metadata.wasm-pack.profile.release]
wasm-opt = false
